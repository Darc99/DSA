Devise a plan for solving problems
Master common problem solving patterns


Problem solving steps
1. Understand the problem
2. Explore concrete examples
3. Break it down
4. Solve/Simplify
5. Look back and refactor



            1.
1.Can I restate the problem in my own words?
2.What are the inputs that go into the problem?
3.What are the outputs that should come from the solution to the problem?
4.Can the outputs be determined from the inputs? i.e do I have enough info to solve the problem?
5.How should I label the important pieces of data that are a part of the problem?
Example
1. implement addition
2. - ints?, -floats?, what about string for large numbers?
3. - ints?, -floats?, string?
4.
5.



            2.
1.Start with simple examples
2.Progress to more complex
3.Explore examples with empty inputs (edge cases)
4. Explore examples with invalid inputs
Example
Write a function which takes in a string and returns counts of each character in the string
1. charCount("aaa"); //{a:4}
charCount("hello"); //{h:1, e:1, l:2, o:1}
2. charCount("my phone number is 123343444") 
charCount("Hello hi")
Do we consider the spaces, symbols, numbers, capital and small letters
3. charCount("") //what should we returns



            3.
1.Explicitly write out the steps you need to takes
Example
Write a function which takes in a string and returns counts of each character in the string
function charCount(str) {
    //make object to return at end.
    //loop over string, for each character...
        //if char is a number/letter AND is a key in object, add one to counts
        //if char is a number/letter AND not in object, add it to object and set value to one
        //if character is something else (space,period, etc.) dont do anything
    //return object at end
}



            4.
1.Find the core difficulty in what you are trying to do.
2.Temporarily ignore that difficulty.
3.Write a simplified solution.
4.Then incorporate that difficulty back in.
Example
Write a function which takes in a string and returns counts of each character in the string



            5.
Refactoring questions
1. Can you improve the performance of your solution?
2. Can you think of other ways to refactor?
3. Can you understand it at a glance?
4. Can you derive the result differently?
5. How have other people solved this problem?








